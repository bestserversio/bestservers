generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlatformFlag {
  A2S
  DISCORD
  TEAMSPEAK3
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum ServerRole {
  ADMIN
  MODERATOR
  MEMBER
  USER
}

enum ServerLinkType {
  WEBSITE
  TWITTER
  FACEBOOK
  GITHUB
  INSTAGRAM
  TIKTOK
}

enum ServerOs {
  WINDOWS
  LINUX
  MAC
}

enum Region {
  AF
  AS
  EU
  NA
  SA
  OC
  AN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(cuid())
  url String? @unique

  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isRestricted  Boolean   @default(false)

  roles UserRole[] @default([USER])

  avatar  String?
  name    String?
  aboutMe String? @db.Text

  accounts Account[]
  sessions Session[]

  servers       Server[]
  serverReviews ServerReview[]
  serverUsers   ServerUser[]
  serverKeys    ServerClaimKey[]

  apiKeys ApiKey[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Platform {
  id Int @id @default(autoincrement())

  flags PlatformFlag[]

  banner String?
  icon   String?

  url         String
  name        String
  nameShort   String?
  description String? @db.Text
  vmsId       Int?

  jsInternal String?
  jsExternal String?

  servers     Server[]
  serverRanks ServerRank[]

  spies       Spy[]        @relation("SpyPlatforms")
  spyScanners SpyScanner[] @relation("SpyScannerPlatforms")
}

model Category {
  id Int @id @default(autoincrement())

  parentId Int?
  parent   Category? @relation("children", fields: [parentId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  banner String?
  icon   String?

  url         String
  name        String
  description String? @db.Text

  children Category[] @relation("children")
  servers  Server[]
}

model Server {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)

  url String? @unique

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  ip       String?
  ip6      String?
  port     Int?
  hostName String?

  platformId Int?
  platform   Platform? @relation(fields: [platformId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  name             String?
  autoName         Boolean @default(true)
  descriptionShort String?
  description      String? @db.Text
  features         String? @db.Text
  rules            String? @db.Text

  online    Boolean   @default(false)
  curUsers  Int       @default(0)
  maxUsers  Int       @default(0)
  bots      Int       @default(0)
  mapName   String?
  password  Boolean   @default(false)
  os        ServerOs?
  secure    Boolean   @default(true)
  dedicated Boolean   @default(true)
  avgUsers  Int       @default(0)

  region      Region?
  locationLat Float?
  locationLon Float?

  lastQueried DateTime @default(now())

  stats   ServerStat[]
  reviews ServerReview[]
  users   ServerUser[]
  keys    ServerClaimKey[]
  links   ServerLink[]
  ranks   ServerRank[]
  tags    ServerTag[]

  @@unique([ip, port])
  @@unique([ip6, port])
}

model ServerStat {
  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  date DateTime @default(now())

  curUsers Int     @default(0)
  maxUsers Int     @default(0)
  rank     Int     @default(0)
  mapName  String?

  @@id([serverId, date])
}

model ServerReview {
  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  modRating  Int
  modDetails String @db.Text

  gameplayRating  Int
  gameplayDetails String @db.Text

  performanceRating  Int
  performanceDetails String @db.Text

  other String @db.Text

  @@id([serverId, userId])
}

model ServerUser {
  id Int @id @default(autoincrement())

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  role ServerRole @default(USER)

  displayName String?
  score       BigInt  @default(0)
  playTime    Float   @default(0.0)

  online      Boolean @default(false)
  sessionTime Float   @default(0.0)

  @@unique([serverId, userId])
}

model ServerClaimKey {
  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  key     String   @default(uuid())
  expires DateTime

  @@id([serverId, userId])
}

model ServerLink {
  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  type ServerLinkType @default(WEBSITE)
  name String?
  url  String

  @@id([serverId, type, url])
}

model ServerRank {
  platformId Int
  platform   Platform @relation(fields: [platformId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  rank Int @default(0)

  @@id([platformId, serverId])
}

model ServerTag {
  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  tag String

  @@id([serverId, tag])
}

model ApiKey {
  id Int @id @default(autoincrement())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  host        String?
  endpoint    String?
  writeAccess Boolean @default(false)

  key String @unique

  limit Int @default(3000)

  hits ApiKeyHits[]
  Spy  Spy[]
}

model ApiKeyHits {
  keyId Int
  key   ApiKey @relation(fields: [keyId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  host     String
  endpoint String
  write    Boolean @default(false)

  time DateTime @default(now())

  @@id([keyId, host, endpoint, time])
}

model Spy {
  id Int @id @default(autoincrement())

  host    String @unique
  verbose Int    @default(0)

  keyId Int?
  key   ApiKey? @relation(fields: [keyId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  apiHost    String @default("http://localhost")
  apiTimeout Int    @default(5)

  webApiEnabled  Boolean @default(false)
  webApiHost     String  @default("http://localhost")
  webApiEndpoint String  @default("/api/spy/get")
  webApiTimeout  Int     @default(5)
  webApiInterval Int     @default(60)

  vmsEnabled      Boolean @default(false)
  vmsKey          String?
  vmsTimeout      Int     @default(5)
  vmsLimit        Int     @default(1000)
  vmsMinWait      Int     @default(60)
  vmsMaxWait      Int     @default(120)
  vmsRecvOnly     Boolean @default(false)
  vmsExcludeEmpty Boolean @default(true)
  vmsSubBots      Boolean @default(false)

  vmsPlatforms Platform[]   @relation("SpyPlatforms")
  scanners     SpyScanner[] @relation("SpyScanners")
}

model SpyScanner {
  id Int @id @default(autoincrement())

  name String

  platforms Platform[] @relation("SpyScannerPlatforms")

  protocol     String  @default("A2S")
  minWait      Int     @default(60)
  maxWait      Int     @default(120)
  limit        Int     @default(100)
  recvOnly     Boolean @default(false)
  subBots      Boolean @default(false)
  queryTimeout Int     @default(3)
  a2sPlayer    Boolean @default(true)

  spies Spy[] @relation("SpyScanners")
}

model BadWord {
  id    Int     @id @default(autoincrement())
  word  String
  exact Boolean @default(false)
}

model BadIp {
  id   Int    @id @default(autoincrement())
  ip   String
  cidr Int    @default(32)

  @@unique([ip, cidr])
}

model BadAsn {
  id  Int @id @default(autoincrement())
  asn Int @unique
}
